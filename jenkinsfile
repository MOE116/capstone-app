pipeline {
    agent any

    environment {
        REGISTRY     = "ekdayodemo"
        APP_NAME     = "hello-world-app"
        IMAGE_TAG    = "${BUILD_NUMBER}" // or use GIT_COMMIT for SHA
        DOCKER_CRED  = "dockerhub-cred"  // Jenkins credential ID for DockerHub
        AWS_REGION   = "us-east-1"
        CLUSTER_NAME = "devops-cluster"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/MOE116/capstone-app.git'
            }
        }

        stage('Test') {
            agent {
                docker {
                    image 'node:18-alpine'   // lightweight Node.js test environment
                    args '-u root:root'     // run as root so npm can install packages
                }
            }
            steps {
                dir('app') {   // üëà go into app directory
                    sh 'npm install'
                    sh 'npm test || true'  // allow pipeline to continue if no tests
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${REGISTRY}/${APP_NAME}:${IMAGE_TAG}", "-f docker/Dockerfile .")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_CRED}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        docker push ${REGISTRY}/${APP_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                sh '''
                  set -e  # stop immediately on error
                  
                  echo "‚è≥ Updating kubeconfig for EKS cluster..."
                  aws eks update-kubeconfig --region ${AWS_REGION} --name ${CLUSTER_NAME}

                  echo "üöÄ Deploying new image to EKS..."
                  kubectl set image deployment/hello-world-deployment \
                    hello-world-container=${REGISTRY}/${APP_NAME}:${IMAGE_TAG} \
                    -n microservices

                  echo "üîç Verifying rollout..."
                  kubectl rollout status deployment/hello-world-deployment -n microservices

                  echo "üì¶ Current pods:"
                  kubectl get pods -n microservices
                '''
            }
        }
    }

    post {
        success {
            echo "‚úÖ Deployment successful! Version: ${IMAGE_TAG}"
        }
        failure {
            echo "‚ùå Pipeline failed. Check Jenkins logs for details."
        }
    }
}
